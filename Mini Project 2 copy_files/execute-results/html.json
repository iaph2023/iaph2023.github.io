{
  "hash": "f777589cff9ff676cead166336664626",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Netflix Titles Analysis\"\nauthor: \"Ian Palmer\"\ndate: 10/02/24\nexecute: \n  warning: false\n  message: false\n---\n\n\nThis is my second project which centers on analyzing the Netflix Titles data set. The focus in this project is to utilize piping to better organize the data. In this project I made three different visualizations. The data set provides insights into the types of content (movies and TV shows), their release years, associated metadata (e.g., directors, actors, countries of production), and trends across the Netflix platform.\n\n\nThis analysis uses data from the [Netflix Titles Data Source](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-04-20/readme.md), which is available through the TidyTuesday github repository.\n\n\n*Exploratory Data Analysis*<br>\nTo introduce the dataset, I begin with a simple exploration of key variables:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load('2021-04-20')\nnetflix <- tuesdata$netflix\n\nhead(netflix,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 12\n  show_id type    title director    cast  country date_added release_year rating\n  <chr>   <chr>   <chr> <chr>       <chr> <chr>   <chr>             <dbl> <chr> \n1 s1      TV Show 3%    <NA>        João… Brazil  August 14…         2020 TV-MA \n2 s2      Movie   7:19  Jorge Mich… Demi… Mexico  December …         2016 TV-MA \n3 s3      Movie   23:59 Gilbert Ch… Tedd… Singap… December …         2011 R     \n4 s4      Movie   9     Shane Acker Elij… United… November …         2009 PG-13 \n5 s5      Movie   21    Robert Luk… Jim … United… January 1…         2008 PG-13 \n# ℹ 3 more variables: duration <chr>, listed_in <chr>, description <chr>\n```\n\n\n:::\n:::\n\n\n\nA quick overview of the data set reveals that the majority of content is categorized as either “Movies” or “TV Shows.” Below is a bar chart illustrating the distribution:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distribution of content type\nnetflix_type_count <- netflix |>\n  count(type)\n\nggplot(netflix_type_count, aes(x = type, y = n, fill = type)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Distribution of Movies vs TV Shows\",\n    x = \"Content Type\",\n    y = \"Count\"\n  )\n```\n\n::: {.cell-output-display}\n![](Mini-Project-2-copy_files/figure-html/unnamed-chunk-2-1.png){fig-alt='A bar chart comparing the count of movies and TV shows on Netflix. Movies significantly outnumber TV shows.' width=672}\n:::\n:::\n\n\n\nHere we can see data frames for the amount of movies and TV shows on Netflix from each release year and the amount of Movies and TV shows on Netflix. We can see that there are around double the amount of movies compared to TV shows. There seems to be a trend of more modern TV shows and movies on Netflix.\n\n\n\n*Content Trends Over Time*<br>\nAnalyzing release years shows a clear trend: Netflix’s library is heavily skewed toward modern content, with the majority of titles released after 2000. The following line chart visualizes the distribution of release years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distribution of release years\nnetflix_year_count <- netflix |>\n  count(release_year) |>\n  arrange(desc(n))\n\nggplot(netflix_year_count, aes(x = release_year, y = n)) +\n  geom_line() +\n  labs(\n    title = \"Netflix Content Release Year Distribution\",\n    x = \"Release Year\",\n    y = \"Count\"\n  )\n```\n\n::: {.cell-output-display}\n![](Mini-Project-2-copy_files/figure-html/unnamed-chunk-3-1.png){fig-alt='A line chart showing the distribution of Netflix content release years. Titles released after 2000 dominate the platform.' width=672}\n:::\n:::\n\n\nFrom the line chart we can see that movies after 2000 dominate Netflix's discography.\n\n\nNext I attempted to explore linguistic patterns in Netflix titles. I used str functions str_detect() and str_to_lower() to look for a popular word. Used regular expression \"love\" to look for the word love in movie and TV titles.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count titles containing the word \"love\"\nlove_count <- netflix |>\n  filter(str_detect(str_to_lower(title), \"love\")) |>\n  summarise(count = n())\n\nlove_count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  count\n  <int>\n1   175\n```\n\n\n:::\n:::\n\n\n\nUses regular expression \"life\\|world\\|death\" to search for more possible popular words in move/tv show titles.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Titles containing the words \"life\", \"world\", or \"death\"\nkeywords_titles <- netflix |>\n  filter(str_detect(str_to_lower(title), \"life|world|death\"))\n\nhead(keywords_titles,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 12\n   show_id type    title   director cast  country date_added release_year rating\n   <chr>   <chr>   <chr>   <chr>    <chr> <chr>   <chr>             <dbl> <chr> \n 1 s150    Movie   A Beau… Andrew … Qi S… China,… December …         2011 TV-14 \n 2 s195    Movie   A Life… Francis… <NA>  Argent… March 20,…         2020 TV-14 \n 3 s310    Movie   Addict… Thierry… Anto… France  June 12, …         2014 TV-14 \n 4 s325    TV Show After … <NA>     Rick… United… April 24,…         2020 TV-MA \n 5 s379    Movie   Alex F… Alex Dí… Alex… Mexico  January 2…         2020 TV-MA \n 6 s399    TV Show Alien … <NA>     <NA>  United… December …         2020 TV-PG \n 7 s421    Movie   All th… Yibrán … Háns… Mexico  January 3…         2020 TV-14 \n 8 s530    Movie   Animal… Han Yan  Li Y… China   September…         2018 TV-MA \n 9 s544    TV Show Anothe… <NA>     Kate… United… July 25, …         2019 TV-MA \n10 s559    TV Show Apache… <NA>     Balt… Argent… August 16…         2019 TV-MA \n# ℹ 3 more variables: duration <chr>, listed_in <chr>, description <chr>\n```\n\n\n:::\n:::\n\n\n\n\nThen I proceeded to create a count for each of the selected words.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count occurrences of each word \"life\", \"world\", and \"death\" in the titles\nword_count <- netflix |>\n  mutate(title_lower = str_to_lower(title)) |>\n  \n  summarise(\n    life_count = sum(str_count(title_lower, \"life\")),\n    world_count = sum(str_count(title_lower, \"world\")),\n    death_count = sum(str_count(title_lower, \"death\"))\n  )\n\n\nword_count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  life_count world_count death_count\n       <int>       <int>       <int>\n1         79          77          24\n```\n\n\n:::\n:::\n\n\n\n\nThe following code chucks perform three different tasks of counting occurrences of directors, actors, and countries, and then displaying the top 10 most popular in each category. It filters out missing or empty values and splits data where necessary (such as for actors and countries with multiple entries separated by commas).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the number of occurrences of each director, excluding missing values\npopular_directors <- netflix |>\n  filter(!is.na(director) & director != \"\") |>\n  count(director) |>\n  arrange(desc(n))\n\n# View the top 10 most popular directors\nhead(popular_directors, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   director                   n\n   <chr>                  <int>\n 1 Raúl Campos, Jan Suter    18\n 2 Marcus Raboy              16\n 3 Jay Karas                 14\n 4 Cathy Garcia-Molina       13\n 5 Jay Chapman               12\n 6 Martin Scorsese           12\n 7 Youssef Chahine           12\n 8 Steven Spielberg          10\n 9 David Dhawan               9\n10 Hakan Algül                8\n```\n\n\n:::\n\n```{.r .cell-code}\n# Separate the cast into individual actors and count their occurrences\npopular_actors <- netflix |>\n  filter(!is.na(cast) & cast != \"\") |>\n  separate_rows(cast, sep = \", \") |>\n  count(cast) |>\n  arrange(desc(n))\n\n# View the top 10 most popular actors\nhead(popular_actors, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   cast                 n\n   <chr>            <int>\n 1 Anupam Kher         42\n 2 Shah Rukh Khan      35\n 3 Naseeruddin Shah    30\n 4 Om Puri             30\n 5 Akshay Kumar        29\n 6 Takahiro Sakurai    29\n 7 Amitabh Bachchan    27\n 8 Boman Irani         27\n 9 Paresh Rawal        27\n10 Yuki Kaji           27\n```\n\n\n:::\n\n```{.r .cell-code}\n# Separate the country column into individual countries and count their occurrences\npopular_countries <- netflix |>\n  filter(!is.na(country) & country != \"\") |>\n  separate_rows(country, sep = \", \") |>\n  count(country) |>\n  arrange(desc(n))\n\n# View the top 10 most popular countries\nhead(popular_countries, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   country            n\n   <chr>          <int>\n 1 United States   3296\n 2 India            990\n 3 United Kingdom   722\n 4 Canada           412\n 5 France           349\n 6 Japan            287\n 7 Spain            215\n 8 South Korea      212\n 9 Germany          199\n10 Mexico           154\n```\n\n\n:::\n:::\n\n\nIt was very interesting to see the large amount of Indian actors appearing in tv shows/movies compared to the total amount of Indian movies. Perhaps there is a fewer supply of popular actors in Bollywood compared to Hollywood in the United States.\n\n\n\nFinally, I created a table that has the top 10 most popular words in Netflix titles. I excluded common conjunction words such as \"the\", \"and\", or \"of\". I also used the regular expressions \\\\d and \\\\s+ to filter out digits and whitespace.\n\n::: {.cell}\n\n```{.r .cell-code}\nnetflix_lowercase_titles <- netflix |>\n  mutate(lower_title = str_to_lower(title))\n\n#Use regular expressions to extract words and exclude those containing digits\nnetflix_words <- netflix_lowercase_titles |>\n  separate_rows(lower_title, sep = \"\\\\s+\") |>\n  filter(!str_detect(lower_title, \"\\\\d\"))\n\n#Remove common words that are not of interest\ncommon_words <- c(\"the\", \"and\", \"in\", \"of\", \"to\", \"a\", \"is\", \"for\", \"with\", \"on\", \"at\", \"by\", \"an\", \"from\", \"i\", \"&\")\n\nnetflix_words_final <- netflix_words |>\n  filter(!is.element(lower_title, common_words))\n\n#Count the frequency of each word\npopular_words <- netflix_words_final |>\n  count(lower_title, sort = TRUE)\n\nhead(popular_words, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   lower_title     n\n   <chr>       <int>\n 1 love          134\n 2 my            127\n 3 christmas      77\n 4 man            71\n 5 you            70\n 6 story          65\n 7 life           59\n 8 world          59\n 9 little         58\n10 one            53\n```\n\n\n:::\n:::\n\n\n\n\nLastly, I created a bar chart from the previous data frame in order to visulize the top 10 most common words in Netflix titles.\n\n::: {.cell}\n\n```{.r .cell-code}\npopular_words |>\n  head(10) |>\n  ggplot(aes(x = reorder(lower_title, n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"green\") +\n  coord_flip() +\n  labs(title = \"Top 10 Most Common Words in Netflix Titles\",\n       x = \"Words\",\n       y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Mini-Project-2-copy_files/figure-html/unnamed-chunk-9-1.png){fig-alt='Bar chart titled “Top 10 Most Common Words in Netflix Titles,” showing the words “love,” “my,” and “Christmas” as the top three, with “love” having the highest frequency. Bars are green, with frequency on the x-axis and words on the y-axis.' width=672}\n:::\n:::\n\n\nMy early prediction of \"love\", \"life\", \"world\" all being popular words in titles turned out to be true. However, \"death\" did not make the top 10.\n\n\n*Conclusion*<br>\nThis project was a great opportunity to practice and build my string manipulation and regular expression skills. By working with the Netflix Titles data set, I applied several str_*() functions and regular expressions to clean and analyze text data, which was a valuable hands-on experience in managing and extracting important information from more unstructured data. Creating visualizations helped reinforce the importance of organizing data effectively for clear storytelling and making results accessible. This project also revealed some interesting trends in Netflix’s content catalog. The analysis revealed that Netflix’s library is dominated by modern content, with movies significantly outnumbering TV shows. Common themes in titles included \"love,\" \"life,\" and \"world,\" while \"death\" was less frequent. Indian actors appeared frequently compared to the smaller number of Indian movies, highlighting unique industry dynamics.\n",
    "supporting": [
      "Mini-Project-2-copy_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}